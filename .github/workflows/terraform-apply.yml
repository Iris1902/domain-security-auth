name: Apply Terraform Changes for Domain Security Auth

on:
  push:
    branches:
      - dev
      - qa
      - main
    paths:
      - 'trigger-*.log' 

jobs:
  terraform-apply:
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.5

      - name: Set Git config for commits (optional)
        run: |
          git config --global user.email "irispicis1962@gmail.com"
          git config --global user.name "Iris1902"

      - name: Initialize Terraform
        run: terraform init -migrate-state

      - name: Validate Terraform
        run: terraform validate

      - name: Format Terraform
        run: terraform fmt -recursive

      - name: Plan Terraform
        run: |
          terraform plan \
            -var="AWS_REGION=${{ secrets.AWS_REGION }}" \
            -var="AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" \
            -var="AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
            -var="AWS_SESSION_TOKEN=${{ secrets.AWS_SESSION_TOKEN }}" \
            -var="BRANCH_NAME=${{ github.ref_name }}"
      
      - name: Apply Terraform
        run: |
          terraform apply -auto-approve \
            -var="AWS_REGION=${{ secrets.AWS_REGION }}" \
            -var="AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" \
            -var="AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
            -var="AWS_SESSION_TOKEN=${{ secrets.AWS_SESSION_TOKEN }}" \
            -var="BRANCH_NAME=${{ github.ref_name }}"

  refresh-asg:
    runs-on: ubuntu-latest
    needs: terraform-apply
    if: failure()  # Solo se ejecuta si terraform-apply falla
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Refrescar instancias de todos los ASG
        run: |
          echo "ðŸ”„ Refrescando instancias de los Auto Scaling Groups de todos los microservicios..."
          for ASG_NAME in $(aws autoscaling describe-auto-scaling-groups --query "AutoScalingGroups[].AutoScalingGroupName" --output text); do
            echo "Procesando ASG: $ASG_NAME"
            INSTANCE_IDS=$(aws autoscaling describe-auto-scaling-groups \
              --auto-scaling-group-names $ASG_NAME \
              --query "AutoScalingGroups[0].Instances[].InstanceId" \
              --output text)
            for id in $INSTANCE_IDS; do
              echo "Etiquetando y terminando instancia $id ..."
              aws ec2 create-tags --resources $id --tags Key=Name,Value=$ASG_NAME-instance
              aws autoscaling terminate-instance-in-auto-scaling-group \
                --instance-id $id \
                --should-decrement-desired-capacity false
            done
          done
